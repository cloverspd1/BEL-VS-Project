@using BEL.FeedbackWorkflow.Models.Feedbacks
@using BEL.FeedbackWorkflow.Models.Common
@using BEL.FeedbackWorkflow.Models.Master;
@using BEL.CommonDataContract;
@model QaulityUserSection

@using (Ajax.BeginForm("SaveQaulityUserSection", "Feedbacks", new AjaxOptions
    {
        HttpMethod = "POST",
        LoadingElementId = "loading",
        OnFailure = "OnFailure",
        OnSuccess = "OnSuccess",
        OnBegin = "BeginClient"
    }, new { enctype = "multipart/form-data" }))
{

    @Html.HiddenFor(m => m.ListDetails[0].ItemId)
    @Html.HiddenFor(m => m.ListDetails[0].ListName)
    @Html.HiddenFor(m => m.SectionName)
    @Html.HiddenFor(m => m.ActionStatus)
    @Html.HiddenFor(m => m.Status)
    @Html.HiddenFor(m => m.QAHeadUser)
    @Html.HiddenFor(m=>m.QualityUserDate)
    @*@Html.HiddenFor(m => m.SendBackToCC)*@
    @Html.Partial("_ApproversList", Model.ApproversList)
    @*@Html.AntiForgeryToken()*@


    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <label class="col-sm-2 control-label left">
                    <span class="text-danger text-default-light"></span>
                    @Html.LabelFor(m => m.SendBackToCC, ResourceNames.Feedbacks) 
                    </label>
                <div class="col-sm-8">
                    @Html.CheckBoxFor(m=>m.SendBackToCC) *Please select this if you want to send back to consumer care.

                    </div>
                </div>
            </div>
        </div>
        <div id="closediv">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="col-sm-4 control-label left">
                            <span class="text-danger text-default-light"></span>
                            @Html.ResourceValue("Label_Comment", ResourceNames.Feedbacks)
                        </label>
                        <div class="col-sm-8">
                            <div class="form-control noborder text-left">
                                @Html.TextAreaFor(m => m.CurrentApprover.Comments, new { maxlength = 1000, @class = "form-control approv", @data_val = "true", @data_val_required = "Comments/Remarks is required (max allow 1000 char.)", data_toggle = "tooltip", title = "Max 1000 characters" })
                                @Html.HiddenFor(x => x.CurrentApprover.Approver)
                                @Html.HiddenFor(x => x.CurrentApprover.Role)
                                @Html.HiddenFor(x => x.CurrentApprover.AssignDate)
                                    
                                        @Html.ValidationMessageFor(m => m.CurrentApprover.Comments, ResourceNames.Feedbacks)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="col-sm-4 control-label left">
                            <span class="text-danger text-default-light">*</span>
                            @Html.LabelFor(m => m.Observations, ResourceNames.Feedbacks)
                        </label>
                        <div class="col-sm-8">
                            <div class="form-control noborder text-left">
                                @Html.TextAreaFor(m => m.Observations, new { maxlength = 1000, @class = "form-control ", @data_val = "true", @data_val_required = "Comments/Remarks is required (max allow 1000 char.)", data_toggle = "tooltip", title = "Max 1000 characters" })
                                
                                    @Html.ValidationMessageFor(m => m.Observations, ResourceNames.Feedbacks)
                            </div>
                        </div>
                    </div>
                </div>


            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="col-sm-4 control-label left">
                            <span class="text-danger text-default-light">*</span>
                            @Html.LabelFor(m => m.ActionPlans, ResourceNames.Feedbacks)
                        </label>
                        <div class="col-sm-8">
                            <div class="form-control noborder text-left">
                                @Html.TextAreaFor(m => m.ActionPlans, new { maxlength = 1000, @class = "form-control ", @data_val = "true", @data_val_required = "Action Plans is required (max allow 1000 char.)", data_toggle = "tooltip", title = "Max 1000 characters" })
                               
                                    @Html.ValidationMessageFor(m => m.ActionPlans, ResourceNames.Feedbacks)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-md-4 control-label">
                            <span class="text-danger text-default-light">*</span>
                            @Html.LabelFor(m => m.ProblemCause, ResourceNames.Feedbacks)
                        </label>
                        <div class="col-md-8 ">
                            <div class="form-control noborder">
                                @Html.DropDownListFor(m => m.ProblemCause, new SelectList((Model.MasterData.FirstOrDefault(x => x.NameOfMaster.Equals(FeedbacksMasters.PROBLEMCAUSEMASTER)) as ProblemCauseMaster).Items.OrderBy(x => x.Title), "Value", "Title"), "Select", new { @class = "form-control", @data_selected = Model.ProblemCause , @data_val = "true", @data_val_required = "Comments/Remarks is required (max allow 1000 char.)"})
                               
                                    @Html.ValidationMessageFor(m => m.ProblemCause, ResourceNames.Feedbacks)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @*<div>
                @if (Model.Status == " Forward to Quality User") {*@ 
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label class="col-md-4 control-label">
                                <span class="text-danger text-default-light">*</span>

                                @Html.Label("Implemented:", ResourceNames.Feedbacks)
                            </label>
                            <div class="col-md-8 ">
                                <div class="form-control noborder">
                                    @Html.DropDownListFor(m => m.Implemented, new SelectList(new List<SelectListItem> { new SelectListItem { Text = "Yes", Value = "Yes" }, new SelectListItem { Text = "No", Value = "No" } }, "Value", "Text"), "Select", new { @class = "form-control", @data_selected = Model.Implemented, @data_val = "true", @data_val_required = "Implemented is required" })
                                    @Html.ValidationMessageFor(m => m.Implemented, ResourceNames.Feedbacks)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label class="col-md-4 control-label">
                                <span class="text-danger text-default-light">*</span>

                                @Html.Label("Implemented Remark:", ResourceNames.Feedbacks)
                            </label>
                            <div class="col-md-8 ">
                                <div class="form-control noborder">
                                    @Html.TextAreaFor(m => m.ImplementedRemark, new { maxlength = 1000, @class = "form-control ", @data_val = "true", @data_val_required = "Implemented Remarks is required (max allow 1000 char.)", data_toggle = "tooltip", title = "Max 1000 characters" })

                                    @Html.ValidationMessageFor(m => m.ImplementedRemark, ResourceNames.Feedbacks)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            <div class="row">
                <div class="col-sm-12">
                    <div class="col-sm-6 attachment">
                        <div class="form-group">
                            <label for="FileNameList" class="col-md-4 control-label">
                                <span class="text-danger text-default-light"></span>
                                @Html.Label("Attachment:", ResourceNames.Feedbacks)
                            </label>
                            <div class="col-md-8 ">

                                <span class="text-danger text-default-light">
                                    (Max. up to 40MB per file and you can upload maximum 10 files.)
                                </span>
                                <div id="QUAttachFile" data-appname="@SiteURLs.FEEDBACKSITEURL">
                                </div>
                                @Html.TextBoxFor(m => m.QUFileNameList, new { @class = "notvisible" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
                @*}
            </div>*@
        </div>
    <div id="quastatusdiv">
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group" id="divQuality">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.Label("Quality Status", ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">
                            @Html.DropDownListFor(m => m.QualityStatus, new SelectList((Model.MasterData.FirstOrDefault(x => x.NameOfMaster.Equals(FeedbacksMasters.QUALITYSTATUSMASTER)) as QualityStatusMaster).Items.OrderBy(x => x.Title), "Value", "Title"), "Select", new { @class = "form-control", @data_selected = Model.QualityStatus, @data_val = "true", @data_val_required = "Quality Status is required (max allow 1000 char.)" })
                             @Html.ValidationMessageFor(m => m.QualityStatus, ResourceNames.Feedbacks)
                            
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 quacomments">
                <div class="form-group">
                    <label class="col-sm-4 control-label left">
                        <span class="text-danger text-default-light"></span>
                        @Html.Label("Quality Comments", ResourceNames.Feedbacks)
                    </label>
                    <div class="col-sm-8">
                        <div class="form-control noborder text-left">
                            @Html.TextAreaFor(m => m.CurrentApprover.QualityComments, new { maxlength = 1000, @class = "form-control ", @data_selected = Model.CurrentApprover.QualityComments, data_toggle = "tooltip", title = "Max 1000 characters", @data_val = "true", @data_val_required = "Quality Comments is required (max allow 1000 char.)" })
                           @Html.ValidationMessageFor(m => m.CurrentApprover.QualityComments, ResourceNames.Feedbacks)
                           
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>


}

