@using BEL.FeedbackWorkflow.Models.Feedbacks
@using BEL.FeedbackWorkflow.Models.Common
@using BEL.FeedbackWorkflow.Models.Master;
@using BEL.CommonDataContract;
@using System.Runtime.Serialization;
@model FeedbacksDetailSection
@*@{
        FeedbacksContract contract = new FeedbacksContract();
        ApproverMaster approverusrelist2 = Model.MasterData.FirstOrDefault(x => x.NameOfMaster.Equals(FeedbacksMasters.APPROVERMASTER)) as ApproverMaster;
        List<ApproverMasterListItem> qaUserList2 = approverusrelist2.Items.Where(x => (x as ApproverMasterListItem).Role == FeedbackRoles.QAULITYUSER).ToList().ConvertAll(p => (ApproverMasterListItem)p);
        qaUserList2 = Helper.SplitUser(qaUserList2);

        ApproverMaster approverusrelist3 = Model.MasterData.FirstOrDefault(x => x.NameOfMaster.Equals(FeedbacksMasters.APPROVERMASTER)) as ApproverMaster;
        List<ApproverMasterListItem> qaUserList3 = approverusrelist3.Items.Where(x => (x as ApproverMasterListItem).Role == FeedbackRoles.LUMQUALITYUSER).ToList().ConvertAll(p => (ApproverMasterListItem)p);
        qaUserList3 = Helper.SplitUser(qaUserList3);
    }*@

<script type="text/javascript">
    @{

        ApproverMaster approverlist = Model.MasterData.FirstOrDefault(x => x.NameOfMaster.Equals(Masters.APPROVERMASTER)) as ApproverMaster;
      }

    var Approverlist = JSON.parse(@(new HtmlString(Json.Encode(Newtonsoft.Json.JsonConvert.SerializeObject(approverlist.Items.OrderBy(p => p.Title).ToList())))));

</script>
<div id="divDocEngineerSection">
    @using (Ajax.BeginForm("SaveFeedbacksDetailSection", "Feedbacks", new AjaxOptions
    {
        HttpMethod = "POST",
        LoadingElementId = "loading",
        OnFailure = "OnFailure",
        OnSuccess = "OnSuccess",
        OnBegin = "BeginClient"
    }, new { enctype = "multipart/form-data" }))
    {

        @Html.HiddenFor(m => m.ListDetails[0].ItemId)
        @Html.HiddenFor(m => m.ListDetails[0].ListName)
        @Html.HiddenFor(m => m.SectionName)
        @Html.HiddenFor(m => m.ActionStatus)
        @Html.HiddenFor(m => m.Status)



        @*@Html.Partial("_CurrentApprover", Model.CurrentApprover ?? new ApplicationStatus())*@
        @*@Html.AntiForgeryToken()*@

        if (Model.RequestDate.HasValue)
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-md-4 control-label">
                            @Html.LabelFor(m => m.RequestDate, ResourceNames.Feedbacks)
                        </label>
                        <div class="col-md-8 ">
                            <div class="form-control noborder">

                                @(Model.RequestDate.HasValue ? Model.RequestDate.Value.ToShortDateString() : "")
                                @Html.Hidden("RequestDate", Model.RequestDate.HasValue ? Model.RequestDate.Value.ToShortDateString() : "")
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-md-4 control-label">
                            @Html.LabelFor(m => m.ProposedBy, ResourceNames.Feedbacks)
                        </label>
                        <div class="col-md-8 ">
                            <div class="form-control noborder">
                                @(string.IsNullOrEmpty(Model.ProposedByName) ? ViewBag.UserName : Model.ProposedByName)
                                @Html.Hidden("ProposedBy", string.IsNullOrEmpty(Model.ProposedBy) ? (string)ViewBag.UserID : Model.ProposedBy)
                                @Html.Hidden("ProposedByName", string.IsNullOrEmpty(Model.ProposedByName) ? (string)ViewBag.UserName : Model.ProposedByName)
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-md-4 control-label">

                            @Html.LabelFor(m => m.FeedbackNo, ResourceNames.Feedbacks)
                        </label>
                        <div class="col-md-8 ">
                            <div class="form-control noborder">
                                <span class="text-danger" id="ReferenceNo">
                                    <b>
                                        @Html.DisplayFor(m => m.FeedbackNo, ResourceNames.Feedbacks)
                                        @Html.HiddenFor(m => m.FeedbackNo)
                                    </b>
                                </span>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="exampleInputEmail1" class="col-md-4 control-label">
                            @Html.LabelFor(m => m.Status, ResourceNames.Feedbacks)
                        </label>
                        <div class="col-md-8 ">
                            <div class="form-control noborder">
                                <span class="text-danger" id="Status">
                                    <b>
                                        @(string.IsNullOrEmpty(Model.WorkflowStatus) ? Html.ResourceValue("Text_New", ResourceNames.Common) : Model.WorkflowStatus)
                                    </b>
                                </span>
                                @Html.HiddenFor(m => m.Status)
                                @Html.HiddenFor(m => m.WorkflowStatus)

                            </div>
                        </div>
                    </div>
                </div>


            </div>
        }
        else
        {
            @Html.Hidden("RequestDate", Model.RequestDate.HasValue ? Model.RequestDate.Value.ToShortDateString() : "")
            @Html.Hidden("ProposedBy", string.IsNullOrEmpty(Model.ProposedBy) ? (string)ViewBag.UserID : Model.ProposedBy)
            @Html.Hidden("ProposedByName", string.IsNullOrEmpty(Model.ProposedByName) ? (string)ViewBag.UserName : Model.ProposedByName)
            @Html.DisplayFor(m => m.FeedbackNo, ResourceNames.Feedbacks)
            @Html.HiddenFor(m => m.FeedbackNo)
            @Html.HiddenFor(m => m.Status)
            @Html.HiddenFor(m => m.WorkflowStatus)

        }
        <div class="row">

            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.ItemCode, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">
                            @if (string.IsNullOrEmpty(Model.Status) || Model.Status.Equals("Draft"))
                            {
                                @Html.TextBoxFor(m => m.ItemCode, new { @class = "user-tags", @min_chars = 4, @data_hint = "Type and Select by Item Code(min 4 char)", @data_url = "/Feedbacks/GetAllItems", @data_limit = "1", @data_onadd = "ItemCodeAdded", @data_onremove = "ItemCodeRemoved", @data_displaycolumn = "name" })
                                @Html.ValidationMessageFor(m => m.ItemCode, ResourceNames.Feedbacks)

                            }
                            else
                            {
                                <div class="form-control noborder">
                                    @Html.DisplayFor(m => m.ItemCode)
                                    @Html.HiddenFor(m => m.ItemCode)
                                </div>

                                @*<div class="hide">
                                        @Html.TextBoxFor(m => m.ItemCode, new { @class = "user-tags ", @min_chars = 4, @data_hint = "Type and Select by Item Code(min 4 char)", @data_url = "/Feedbacks/GetAllItems", @data_limit = "1", @data_onadd = "ItemCodeAdded", @data_onremove = "ItemCodeRemoved", @data_displaycolumn = "name" })
                                        @Html.ValidationMessageFor(m => m.ItemCode, ResourceNames.Feedbacks)
                                    </div>*@
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">

                        @Html.LabelFor(m => m.ItemDescription, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">
                            <span class="ItemDescription">
                                <span>
                                    @Html.DisplayFor(m => m.ItemDescription, new { @class = "form-control" })
                                </span>
                                @Html.HiddenFor(m => m.ItemDescription)
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">


            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">

                        @Html.LabelFor(m => m.BusinessUnits, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">
                            <span class="BusinessUnits">
                                <span>
                                    @Html.DisplayFor(m => m.BusinessUnits, new { @class = "form-control" })
                                </span>
                                @Html.HiddenFor(m => m.BusinessUnits)
                            </span>

                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.ProductType, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">
                            @*@Html.TextAreaFor(m => m.ProductType, new { maxLength = 100, @class = "form-control", data_toggle = "tooltip", title = "Max 100 characters" })
                                @Html.ValidationMessageFor(m => m.ProductType, ResourceNames.Feedbacks)*@
                            <span class="ProductGroup ItemCode">
                                <span>
                                    @Html.DisplayFor(m => m.ProductType, new { @class = "form-control" })
                                </span>
                                @Html.HiddenFor(m => m.ProductType)
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.SupplierCode, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">
                            @if (Model.Status == "Sent Back")
                            {
                                @Html.DisplayFor(m => m.SupplierCode, new { @class = "form-control" })
                                @Html.HiddenFor(m => m.SupplierCode)

                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.SupplierCode, new { maxLength = 4, @class = "form-control alphanumericwithspace", data_toggle = "tooltip", title = "Max 4 characters" })
                                @Html.ValidationMessageFor(m => m.SupplierCode, ResourceNames.Feedbacks)
                            }

                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        @Html.LabelFor(m => m.Branch, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8">
                        <div class="form-control noborder">
                            @(string.IsNullOrEmpty(Model.Branch) ? "" : Model.Branch)
                            @Html.HiddenFor(m => m.Branch)
                        </div>
                    </div>
                </div>
            </div>



        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.FeedbackTitle, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">
                            @if (Model.Status == "Sent Back")
                            {
                                @Html.DisplayFor(m => m.FeedbackTitle, new { @class = "form-control" })
                                @Html.HiddenFor(m => m.FeedbackTitle)


                            }
                            else
                            {
                                @Html.TextAreaFor(m => m.FeedbackTitle, new { maxLength = 255, @class = "form-control", data_toggle = "tooltip", title = "Max 255 characters" })
                                @Html.ValidationMessageFor(m => m.FeedbackTitle, ResourceNames.Feedbacks)
                            }

                        </div>
                    </div>
                </div>
            </div>
            @*<div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-md-4 control-label">
                            <span class="text-danger text-default-light">*</span>
                            @Html.LabelFor(m => m.ModelName, ResourceNames.Feedbacks)
                        </label>
                        <div class="col-md-8 ">
                            <div class="form-control noborder">
                                @Html.TextAreaFor(m => m.ModelName, new { maxLength = 255, @class = "form-control", data_toggle = "tooltip", title = "Max 255 characters" })
                                @Html.ValidationMessageFor(m => m.ModelName, ResourceNames.Feedbacks)
                            </div>
                        </div>
                    </div>
                </div>*@




            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.ProductSerial, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">
                            @if (Model.Status == "Sent Back")
                            {
                                @Html.DisplayFor(m => m.ProductSerial, new { @class = "form-control" })
                                @Html.HiddenFor(m => m.ProductSerial)
                            }
                            else
                            {
                                @Html.TextAreaFor(m => m.ProductSerial, new { maxLength = 1000, @class = "form-control", data_toggle = "tooltip", title = "Max 1000 characters" })
                                @Html.ValidationMessageFor(m => m.ProductSerial, ResourceNames.Feedbacks)
                            }



                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>

                        @Html.LabelFor(m => m.DefectDescription, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">
                            @if (Model.Status == "Sent Back")
                            {
                                @Html.DisplayFor(m => m.DefectDescription, new { @class = "form-control" })
                                @Html.HiddenFor(m => m.DefectDescription)
                            }
                            else
                            {
                                @Html.TextAreaFor(m => m.DefectDescription, new { maxLength = 1000, @class = "form-control", data_toggle = "tooltip", title = "Max 1000 characters" })
                                @Html.ValidationMessageFor(m => m.DefectDescription, ResourceNames.Feedbacks)
                            }



                        </div>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 attachment">
                <div class="form-group">
                    <label for="FileNameList" class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.FileNameList, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">

                        <span class="text-danger text-default-light">
                            (Max. up to 40MB per file and you can upload maximum 10 files.)
                        </span>
                        @*@if (Model.FeedbackNo == null)
                            {
                                <div id="AttachFile" data-appname="@SiteURLs.FEEDBACKSITEURL">
                                </div>
                                @Html.TextBoxFor(m => m.FileNameList, new { @class = "notvisible" })
                                @Html.ValidationMessageFor(m => m.FileNameList, ResourceNames.Feedbacks)

                            }
                            else
                            {
                                @Html.HiddenFor(m => m.FileNameList);

                            }*@
                        <div id="AttachFile" data-appname="@SiteURLs.FEEDBACKSITEURL">
                        </div>
                        @Html.TextBoxFor(m => m.FileNameList, new { @class = "notvisible" })
                        @Html.ValidationMessageFor(m => m.FileNameList, ResourceNames.Feedbacks)




                    </div>
                </div>
            </div>
        </div>



        @*<div class="row" id="sampleDiv" hidden>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="col-md-4 control-label">
                            <span class="text-danger text-default-light">*</span>

                            @Html.LabelFor(m=>m.SampleComments, ResourceNames.Feedbacks)
                        </label>
                        <div class="col-md-8 ">
                            <div class="form-control noborder">

                                @Html.TextAreaFor(m => m.SampleComments, new { maxlength = 1000, @class = "form-control ", @data_val = "true", @data_val_required = "Comments/Remarks is required (max allow 1000 char.)", data_toggle = "tooltip", title = "Max 1000 characters" })
                                @Html.ValidationMessageFor(m => m.SampleComments, ResourceNames.Feedbacks)

                            </div>
                        </div>
                    </div>
                </div>
            </div>*@



        <div class="row" id="divSiteCompleted">
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-8 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.IsSiteCompleted, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-4">
                        <div class="form-control noborder">

                            @*@Html.CheckBoxFor(m => m.IsSiteCompleted)*@
                            @Html.DropDownListFor(m => m.IsSiteCompleted, new SelectList(new List<SelectListItem> { new SelectListItem { Text = "Yes", Value = "Yes" }, new SelectListItem { Text = "No", Value = "No" } }, "Value", "Text"), "Select", new { @class = "form-control", @data_selected = Model.IsSiteCompleted, @data_val = "true", @data_val_required = "Is Site Completed / under construction is required" })
                            @*@Html.ValidationMessageFor(m => m.IsSiteCompleted, ResourceNames.Feedbacks)*@
                            @Html.ValidationMessageFor(m => m.IsSiteCompleted, ResourceNames.Feedbacks)

                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.BNVoltage, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8">
                        <div class="form-control noborder">
                            @Html.TextBoxFor(m => m.BNVoltage, new { @class = "form-control", data_toggle = "tooltip", title = "Integer and decimal only", onkeypress = "return validateDecimalValue(this, event);"})
                            @Html.ValidationMessageFor(m => m.BNVoltage, ResourceNames.Feedbacks)
                        </div>
                    </div>
                </div>
            </div>



        </div>

        <div class="row" id="DivAnyProtection">
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-8 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.ProtectionForVoltage, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-4">
                        <div class="form-control noborder">

                            @*@Html.CheckBoxFor(m => m.ProtectionForVoltage)*@
                            @Html.DropDownListFor(m => m.ProtectionForVoltage, new SelectList(new List<SelectListItem> { new SelectListItem { Text = "Yes", Value = "Yes" }, new SelectListItem { Text = "No", Value = "No" } }, "Value", "Text"),"Select", new { @class = "form-control", @data_selected = Model.ProtectionForVoltage, @data_val = "true", @data_val_required = "Any Protection for Voltage / Current used is required" })
                            @Html.ValidationMessageFor(m => m.ProtectionForVoltage, ResourceNames.Feedbacks)
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.ENVoltage, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8">
                        <div class="form-control noborder">
                            @Html.TextBoxFor(m => m.ENVoltage, new { @class = "form-control", data_toggle = "tooltip", title = "Integer/Decimal only" ,onkeypress = "return validateDecimalValue(this, event);" })
                            @Html.ValidationMessageFor(m => m.ENVoltage, ResourceNames.Feedbacks)
                        </div>
                    </div>
                </div>
            </div>



        </div>

        <div class="row" id="divProductWiring">
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-8 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.ProductWiring, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-4">
                        <div class="form-control noborder">
                            @*@Html.CheckBoxFor(m => m.ProductWiring)*@
                            @Html.DropDownListFor(m => m.ProductWiring, new SelectList(new List<SelectListItem> { new SelectListItem { Text = "Yes", Value = "Yes" }, new SelectListItem { Text = "No", Value = "No" } }, "Value", "Text"),"Select", new { @class = "form-control", @data_selected = Model.ProductWiring, @data_val = "true", @data_val_required = "Is Product Wiring is Ok required" })
                            @Html.ValidationMessageFor(m => m.ProductWiring, ResourceNames.Feedbacks)
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.ENVoltageLUM, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8">
                        <div class="form-control noborder">
                            @Html.TextBoxFor(m => m.ENVoltageLUM, new { @class = "form-control", data_toggle = "tooltip", title = "Integer/Decimal only", onkeypress = "return validateDecimalValue(this, event);" })
                            @Html.ValidationMessageFor(m => m.ENVoltageLUM, ResourceNames.Feedbacks)
                        </div>
                    </div>
                </div>
            </div>



        </div>

        <div class="row" id="divRNVtg">
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.RNVoltage, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">

                            @Html.TextBoxFor(m => m.RNVoltage, new { @class = "form-control", data_toggle = "tooltip", title = "Integer/Decimal only", onkeypress = "return validateDecimalValue(this, event);" })
                            @Html.ValidationMessageFor(m => m.RNVoltage, ResourceNames.Feedbacks)

                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.LNVoltage, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8">
                        <div class="form-control noborder">
                            @Html.TextBoxFor(m => m.LNVoltage, new { @class = "form-control", data_toggle = "tooltip", title = "Integer/Decimal only", onkeypress = "return validateDecimalValue(this, event);" })
                            @Html.ValidationMessageFor(m => m.LNVoltage, ResourceNames.Feedbacks)
                        </div>
                    </div>
                </div>
            </div>



        </div>

        <div class="row" id="divYNvtg">
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.YNVoltage, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8 ">
                        <div class="form-control noborder">

                            @Html.TextBoxFor(m => m.YNVoltage, new { @class = "form-control", data_toggle = "tooltip", title = "Integer/Decimal only", onkeypress = "return validateDecimalValue(this, event);" })
                            @Html.ValidationMessageFor(m => m.YNVoltage, ResourceNames.Feedbacks)

                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        <span class="text-danger text-default-light">*</span>
                        @Html.LabelFor(m => m.powersupplier, ResourceNames.Feedbacks)
                    </label>
                    <div class="col-md-8">
                        <div class="form-control noborder">
                            @Html.TextBoxFor(m => m.powersupplier, new { @class = "form-control", data_toggle = "tooltip", title = "Integer/Decimal only", onkeypress = "return validateDecimalValue(this, event);" })
                            @Html.ValidationMessageFor(m => m.powersupplier, ResourceNames.Feedbacks)
                        </div>
                    </div>
                </div>
            </div>



        </div>

        <div id="feedbacksentback">
            @if (Model.Status == "Sent Back")
            {
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label class="col-md-4 control-label">
                                <span class="text-danger text-default-light">*</span>

                                @Html.LabelFor(m => m.SampleProvided, ResourceNames.Feedbacks)
                            </label>
                            <div class="col-md-8 ">
                                <div class="form-control noborder">
                                    @Html.DropDownListFor(m => m.SampleProvided, new SelectList(new List<SelectListItem> { new SelectListItem { Text = "Yes", Value = "Yes" }, new SelectListItem { Text = "No", Value = "No" } }, "Value", "Text"), "Select", new { @class = "form-control", @data_selected = Model.SampleProvided, @data_val = "true", @data_val_required = "Sample provided is required" })
                                    @Html.ValidationMessageFor(m => m.SampleProvided, ResourceNames.Feedbacks)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label class="col-md-4 control-label">
                                <span class="text-danger text-default-light"></span>

                                @Html.LabelFor(m => m.SampleQuantity, ResourceNames.Feedbacks)
                            </label>
                            <div class="col-md-8 ">
                                <div class="form-control noborder">

                                    @Html.TextBoxFor(m => m.SampleQuantity, new { @class = "form-control", data_toggle = "tooltip", title = "" })
                                    @Html.ValidationMessageFor(m => m.SampleQuantity, ResourceNames.Feedbacks)

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label class="col-md-4 control-label">
                                <span class="text-danger text-default-light">*</span>

                                @Html.LabelFor(m => m.SampleComments, ResourceNames.Feedbacks)
                            </label>
                            <div class="col-md-8 ">
                                <div class="form-control noborder">

                                    @Html.TextAreaFor(m => m.SampleComments, new { maxlength = 1000, @class = "form-control ", @data_val = "true", @data_selected = Model.SampleComments, @data_val_required = "Comments/Remarks is required (max allow 1000 char.)", data_toggle = "tooltip", title = "Max 1000 characters" })
                                    @Html.ValidationMessageFor(m => m.SampleComments, ResourceNames.Feedbacks)

                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label class="col-md-8 control-label">

                                Note: This information will be submitted to Regional trainer, for verification and follow up with quality department:
                            </label>
                            <div class="col-md-4 ">
                                <div class="form-control noborder">
                                    @Html.DisplayFor(m => m.QualityUserName)
                                    @Html.HiddenFor(m => m.QAUser)
                                    @Html.HiddenFor(m => m.QualityUserName)


                                    @Html.DisplayFor(m => m.LUMQualityUserName)
                                    @Html.HiddenFor(m => m.LUMQAUser)
                                    @Html.HiddenFor(m => m.LUMQualityUserName)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {


                //
                <div class="row" id="divActingUser">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label class="col-md-8 control-label">

                                Note: This information will be submitted to Regional trainer, for verification and follow up with quality department:
                            </label>
                            <div class="col-md-4 ">
                                <div class="form-control noborder">
                                    @Html.DisplayFor(m => m.CCActingUserName)
                                    @Html.HiddenFor(m => m.CCActingUser)
                                    @Html.HiddenFor(m => m.CCActingUserName)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row" id="divLUMUser">
                    @**@

                    <div class="col-sm-12">
                        <div class="form-group">
                            <label class="col-md-8 control-label">

                                Note: This information will be submitted to LUM Service Managers, for verification and follow up with quality department:
                            </label>
                            <div class="col-md-4 ">
                                <div class="form-control noborder">
                                    @Html.DisplayFor(m => m.LUMActingUserName)
                                    @Html.HiddenFor(m => m.LUMActingUser)
                                    @Html.HiddenFor(m => m.LUMActingUserName)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }



        </div>

        @Html.Partial("_ApproversList", Model.ApproversList)
    }
</div>
<script type="text/javascript">

    function validateDecimalValue(element, event) {
        var charachterCode = (event.which) ? event.which : event.keyCode;
        var number = element.value.split('.');
        // characterCode 46: period
        // characterCode 31: unit seperator
        // characterCode 48: digit 0
        // characterCode 57: digit 9
        if (charachterCode != 46 && charachterCode > 31 && (charachterCode < 48 || charachterCode > 57)) {
            return false;
        }
        // Just one period
        if (number.length > 1 && charachterCode == 46) {
            return false;
        }
        // Get the carat position
        var caratPosition = getSelectionStart(element);
        var dotPosition = element.value.indexOf(".");
        if (caratPosition > dotPosition && dotPosition > -1 && (number[1].length > 1)) {
            return false;
        }
        return true;
    }
    function getSelectionStart(e) {
        if (e.createTextRange) {
            var r = document.selection.createRange().duplicate();
            r.moveEnd('character', e.value.length);
            if (r.text === '') return e.value.length;
            return e.value.lastIndexOf(r.text);
        } else return e.selectionStart;
    }
</script>